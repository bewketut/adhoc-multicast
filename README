what you need
=============
You need iptables >= 1.4.3
and kernel-header >= 2.6.17  (can also use ONLY header files -kernel-headers*.rpm/deb in /lib/modules)
tool: socat, vlc 
main module is xt_mcast.c  
--now updated to work with ping if you don't have socat and to use mcastcmds instead of vlc for testing. 
--Intentional small bug (for it not work) has been removed...
 (copyrighted work)code bug removed and has been made Berlkely license and free
(Give credit to the copyright owner-Bewketu Tadilo (me)- in any further code). 
What it does
============
This module provides a filter for incoming multicast traffic by doing the f/g:
1. Snooping Subscibe (or join) messages and storing the client by its group
hash
2. We also snoop mulitcast source address (unicast type). This is the part where one sort of NEEDs 
to pierce a hole for the multicast (which can be seen in the second last line) source- its unicast address.
We store the client by the multicast source hash.

3. When multicast trafffic come we hash both group and source address and
Checking if the client exists in both hashes.

testing (blocking and unblocking multicast traffic)
===================================================
For testing purpose do the following (need to be root) :
# sh test.sh 
Start vlc (www.videolan.org) stream video  on 238.234.234.1
Start extra vlc. Try to open the video on open network and entering the streamingaddress. It should NOT open.
You will have to choose UDP in both cases.

Then do the following (after changing the 192.x.x.x to your local ip)  
echo "hi" | socat - udp-sendto:192.x.x.x:4444 
and it should now open

sim_test
========
This gives a userland simulator to what the kernel module is trying to do. You need the header /linux/list.h stripped for user app. It is basically a circular linked list implentation
for kernel programs.

related (application level filtering)
====================================
add a control byte (for file exclusion)on the last of to be sent BUF_SIZed data.
1.Hold the next to be sent one byte data's value in temp. (we want to send BUF_SIZ datas but will send  BUF_SIZ+1(MCASTBUF_SIZ) with the control byte for mutual exclusion for writes on the receiver. so hold the value of data[BUF_SIZ] i.e
temp= data[BUF_SIZ] //the next start of data array start from 0 so the end of tobe data  is data[BUF_SIZ-1](BUF_SIZ minus 1),
2.Assign control byte as data[BUF_SIZ]= control byte(filename for example to have mutual exclusive writes of files on a multicast socket)
3. Write the socket with data of size BUF_SIZ+1.Send the BUF_SIZed data part first then reassign temp  data[BUF_SIZ]=temp so datafile rewritten as was.then send from BUF_SIZ to 2*BUF_SIZ repeating the process from that on until file or data is fully sent. 
If you are reading BUF_SIZ per read and fseeking to n*BUF_SIZ, you need the buffer to be of size BUF_SIZ+1 (1 for the control byte) in that case you dont need temp value holder.
mcastcmds-nt3 (employes the above application level filtering mechanism)
======================== (works for android too --you can easily share files by your wifi receiver (send and receive ...etc now. ).
https://github.com/bewketut/multicastandroid 
For android...1.download a terminal emulator from the app store
2. then on the commandline 'cp /sdcard/Download/mcastcmds_mobile ~/mcastcmds (or~/mh) (whereever mcastcmds_android was downloaded and mcastshare or mh for commandname if you like).
3. chmod 755 ~/mh   (~/mcastcmds or the name )
4.run the program anywhere as: ~/mcastcmds (or ~/mcastshare or ~/mh if you changed the name) 
4. put an alias at the starup shell if you like(alias mh= '~/mh'; then  (e.g. ~/mcastcmds --help).
The mh -f file_name.mp4  has good signs that it will play on network. tried it using mxplayer (opening url rtp://127.0.0.1:40xx the ~/mh receiver has to be on.). complained it has no the codecs. Choose your own player that can play rtp (for mp4s) but ...tested it on androids. 
It is ****now fully multicast*****hippy hooray**** for the 'wif-direct'  host and client (if the socket and imr on the hotspot host... binds 192.168.x.1 directly- it will
not allow binding for a hotspot host by default...bind it by force..i.e. directly use the hotspot server ip.). 
This allows to run commands on remote multicast joined host and importantly multicast file transfers. Who knows maybe this
could be used for android devices..imagine a lecturer using this app sending all "multicast joined" students lecture notes
without "copy from this one student or from the one who has it". I have no new computer and android building tools are
newer and demand 64-bit computers and so I have been kept dumb due to lack of money and resource. The one who gets this
idea can mention me and they should be more than capable to build cleaner application than xzender used in iphones and
androids.
example usage:
--------------
(e.g. usage first stream to your network via vlc on the commandline as: vlc file.vid --sout '#duplicate{dst=rtp{mux=ts,dst=225.224.222.213}, dst=display}'
then use mcastcmds on the network as: mcastcmds -c vlc rtp://225.224.222.213 -m mcastcmds'addr (or nothing as default) using multicast (open for your clients using command execution option the video that is being streamed on the network). This provided mcastcmds is running on your clients machine (as a daemon for example). They will have no means of knowing the video stream multicast address so it provides you the option to set it yourself and them not knowing..given mcastcmds is running on their machine and have vlc installed. 
